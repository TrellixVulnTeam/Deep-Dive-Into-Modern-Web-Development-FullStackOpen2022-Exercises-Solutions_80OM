{"ast":null,"code":"function objectsEquality(first,second){\"use strict\";// If the value of either variable is empty\n// we can instantly compare them and check\n// for equality.\nif(first===null||first===undefined||second===null||second===undefined){return first===second;}// If neither are empty, we can check if\n// their constructors are equal. Because\n// constructors are objects, if they are\n// equal, we know the objects are of the\n// same type (though not necessarily of\n// the same value).\nif(first.constructor!==second.constructor){return false;}// If we reach this point, we know both\n// objects are of the same type so all\n// we need to do is check what type one\n// of the objects is, and then compare\n// them\nif(first instanceof Function||first instanceof RegExp){return first===second;}// Throught back to the equlity check\n// we started with. Just incase we are\n// comparing simple objects.\nif(first===second||first.valueOf()===second.valueOf()){return true;}// If the value of check we saw above\n// failed and the objects are Dates,\n// we know they are not Dates because\n// Dates would have equal valueOf()\n// values.\nif(first instanceof Date)return false;// If the objects are arrays, we know\n// they are not equal if their lengths\n// are not the same.\nif(Array.isArray(first)&&first.length!==second.length){return false;}// If we have gotten to this point, we\n// need to just make sure that we are\n// working with objects so that we can\n// do a recursive check of the keys and\n// values.\nif(!(first instanceof Object)||!(second instanceof Object)){return false;}// We now need to do a recursive check\n// on all children of the object to\n// make sure they are deeply equal\nvar firstKeys=Object.keys(first);// Here we just make sure that all the\n// object keys on this level of the\n// object are the same.\nvar allKeysExist=Object.keys(second).every(function(i){return firstKeys.indexOf(i)!==-1;});// Finally, we pass all the values of our\n// of each object into this function to\n// make sure everything matches\nvar allKeyValuesMatch=firstKeys.every(function(i){return objectsEquality(first[i],second[i]);});return allKeysExist&&allKeyValuesMatch;}export default objectsEquality;","map":{"version":3,"names":["objectsEquality","first","second","undefined","constructor","Function","RegExp","valueOf","Date","Array","isArray","length","Object","firstKeys","keys","allKeysExist","every","i","indexOf","allKeyValuesMatch"],"sources":["C:/Users/Samim Qeya/Documents/Workspace/Full Stack Open 2022/part-2/thephonebook/src/objectsEquality.js"],"sourcesContent":["function objectsEquality(first, second) {\r\n    \"use strict\";\r\n  \r\n    // If the value of either variable is empty\r\n    // we can instantly compare them and check\r\n    // for equality.\r\n    if (\r\n      first === null ||\r\n      first === undefined ||\r\n      second === null ||\r\n      second === undefined\r\n    ) {\r\n      return first === second;\r\n    }\r\n  \r\n    // If neither are empty, we can check if\r\n    // their constructors are equal. Because\r\n    // constructors are objects, if they are\r\n    // equal, we know the objects are of the\r\n    // same type (though not necessarily of\r\n    // the same value).\r\n    if (first.constructor !== second.constructor) {\r\n      return false;\r\n    }\r\n  \r\n    // If we reach this point, we know both\r\n    // objects are of the same type so all\r\n    // we need to do is check what type one\r\n    // of the objects is, and then compare\r\n    // them\r\n    if (first instanceof Function || first instanceof RegExp) {\r\n      return first === second;\r\n    }\r\n  \r\n    // Throught back to the equlity check\r\n    // we started with. Just incase we are\r\n    // comparing simple objects.\r\n    if (first === second || first.valueOf() === second.valueOf()) {\r\n      return true;\r\n    }\r\n  \r\n    // If the value of check we saw above\r\n    // failed and the objects are Dates,\r\n    // we know they are not Dates because\r\n    // Dates would have equal valueOf()\r\n    // values.\r\n    if (first instanceof Date) return false;\r\n  \r\n    // If the objects are arrays, we know\r\n    // they are not equal if their lengths\r\n    // are not the same.\r\n    if (Array.isArray(first) && first.length !== second.length) {\r\n      return false;\r\n    }\r\n  \r\n    // If we have gotten to this point, we\r\n    // need to just make sure that we are\r\n    // working with objects so that we can\r\n    // do a recursive check of the keys and\r\n    // values.\r\n    if (!(first instanceof Object) || !(second instanceof Object)) {\r\n      return false;\r\n    }\r\n  \r\n    // We now need to do a recursive check\r\n    // on all children of the object to\r\n    // make sure they are deeply equal\r\n    const firstKeys = Object.keys(first);\r\n  \r\n    // Here we just make sure that all the\r\n    // object keys on this level of the\r\n    // object are the same.\r\n    const allKeysExist = Object.keys(second).every(\r\n      i => firstKeys.indexOf(i) !== -1\r\n    );\r\n  \r\n    // Finally, we pass all the values of our\r\n    // of each object into this function to\r\n    // make sure everything matches\r\n    const allKeyValuesMatch = firstKeys.every(i =>\r\n      objectsEquality(first[i], second[i])\r\n    );\r\n  \r\n    return allKeysExist && allKeyValuesMatch;\r\n  }\r\n\r\n  export default objectsEquality;"],"mappings":"AAAA,QAASA,gBAAT,CAAyBC,KAAzB,CAAgCC,MAAhC,CAAwC,CACpC,aAEA;AACA;AACA;AACA,GACED,KAAK,GAAK,IAAV,EACAA,KAAK,GAAKE,SADV,EAEAD,MAAM,GAAK,IAFX,EAGAA,MAAM,GAAKC,SAJb,CAKE,CACA,MAAOF,MAAK,GAAKC,MAAjB,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GAAID,KAAK,CAACG,WAAN,GAAsBF,MAAM,CAACE,WAAjC,CAA8C,CAC5C,MAAO,MAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA,GAAIH,KAAK,WAAYI,SAAjB,EAA6BJ,KAAK,WAAYK,OAAlD,CAA0D,CACxD,MAAOL,MAAK,GAAKC,MAAjB,CACD,CAED;AACA;AACA;AACA,GAAID,KAAK,GAAKC,MAAV,EAAoBD,KAAK,CAACM,OAAN,KAAoBL,MAAM,CAACK,OAAP,EAA5C,CAA8D,CAC5D,MAAO,KAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA,GAAIN,KAAK,WAAYO,KAArB,CAA2B,MAAO,MAAP,CAE3B;AACA;AACA;AACA,GAAIC,KAAK,CAACC,OAAN,CAAcT,KAAd,GAAwBA,KAAK,CAACU,MAAN,GAAiBT,MAAM,CAACS,MAApD,CAA4D,CAC1D,MAAO,MAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA,GAAI,EAAEV,KAAK,WAAYW,OAAnB,GAA8B,EAAEV,MAAM,WAAYU,OAApB,CAAlC,CAA+D,CAC7D,MAAO,MAAP,CACD,CAED;AACA;AACA;AACA,GAAMC,UAAS,CAAGD,MAAM,CAACE,IAAP,CAAYb,KAAZ,CAAlB,CAEA;AACA;AACA;AACA,GAAMc,aAAY,CAAGH,MAAM,CAACE,IAAP,CAAYZ,MAAZ,EAAoBc,KAApB,CACnB,SAAAC,CAAC,QAAIJ,UAAS,CAACK,OAAV,CAAkBD,CAAlB,IAAyB,CAAC,CAA9B,EADkB,CAArB,CAIA;AACA;AACA;AACA,GAAME,kBAAiB,CAAGN,SAAS,CAACG,KAAV,CAAgB,SAAAC,CAAC,QACzCjB,gBAAe,CAACC,KAAK,CAACgB,CAAD,CAAN,CAAWf,MAAM,CAACe,CAAD,CAAjB,CAD0B,EAAjB,CAA1B,CAIA,MAAOF,aAAY,EAAII,iBAAvB,CACD,CAED,cAAenB,gBAAf"},"metadata":{},"sourceType":"module"}